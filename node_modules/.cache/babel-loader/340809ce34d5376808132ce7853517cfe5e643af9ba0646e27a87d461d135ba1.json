{"ast":null,"code":"var _jsxFileName = \"/Users/irfan/Documents/Programming/downloaderPict/image-downloader/src/App.js\";\nimport React from \"react\";\nimport { saveAs } from \"file-saver\";\nimport imageData from \"./excel-to-json.json\"; // Pastikan file JSON ini ditempatkan di direktori src\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  const downloadImages = async () => {\n    const images = imageData.Products.map(product => product.item_image);\n    const maxRetries = 3;\n    const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n    let failedDownloads = [];\n    for (let i = 0; i < images.length; i++) {\n      let attempts = 0;\n      let success = false;\n      while (attempts < maxRetries && !success) {\n        try {\n          attempts++;\n          if (!images[i] || !isValidUrl(images[i])) {\n            throw new Error(`Invalid URL: ${images[i]}`);\n          }\n          const response = await fetch(images[i]);\n          if (!response.ok) {\n            throw new Error(`HTTP status code: ${response.status}`);\n          }\n          const blob = await response.blob();\n          const fileName = `${i + 1}.jpg`; // Mengganti nama file mulai dari 1\n          saveAs(blob, fileName);\n          success = true;\n          console.log(`Berhasil mengunduh dan menyimpan: ${fileName}`);\n        } catch (error) {\n          console.error(`Kesalahan mengunduh gambar ${i + 1}: ${error}. Percobaan ${attempts} dari ${maxRetries}`);\n          if (attempts < maxRetries) {\n            await delay(2000); // Menunggu 2 detik sebelum mencoba lagi\n          }\n        }\n      }\n      if (!success) {\n        failedDownloads.push(images[i]);\n        console.error(`Gagal mengunduh gambar ${i + 1} setelah ${maxRetries} percobaan.`);\n      }\n    }\n    if (failedDownloads.length > 0) {\n      console.log(\"Daftar URL yang gagal diunduh:\", failedDownloads);\n      alert(`Gagal mengunduh beberapa gambar. Lihat console untuk detail.`);\n    } else {\n      alert(\"Semua gambar berhasil diunduh dan disimpan.\");\n    }\n  };\n  const isValidUrl = string => {\n    try {\n      new URL(string);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pengunduh Gambar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: downloadImages,\n      children: \"Unduh Gambar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","saveAs","imageData","jsxDEV","_jsxDEV","App","downloadImages","images","Products","map","product","item_image","maxRetries","delay","ms","Promise","resolve","setTimeout","failedDownloads","i","length","attempts","success","isValidUrl","Error","response","fetch","ok","status","blob","fileName","console","log","error","push","alert","string","URL","e","children","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/irfan/Documents/Programming/downloaderPict/image-downloader/src/App.js"],"sourcesContent":["import React from \"react\";\nimport { saveAs } from \"file-saver\";\nimport imageData from \"./excel-to-json.json\"; // Pastikan file JSON ini ditempatkan di direktori src\n\nconst App = () => {\n  const downloadImages = async () => {\n    const images = imageData.Products.map((product) => product.item_image);\n    const maxRetries = 3;\n    const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n    let failedDownloads = [];\n\n    for (let i = 0; i < images.length; i++) {\n      let attempts = 0;\n      let success = false;\n\n      while (attempts < maxRetries && !success) {\n        try {\n          attempts++;\n          if (!images[i] || !isValidUrl(images[i])) {\n            throw new Error(`Invalid URL: ${images[i]}`);\n          }\n          const response = await fetch(images[i]);\n          if (!response.ok) {\n            throw new Error(`HTTP status code: ${response.status}`);\n          }\n          const blob = await response.blob();\n          const fileName = `${i + 1}.jpg`; // Mengganti nama file mulai dari 1\n          saveAs(blob, fileName);\n          success = true;\n          console.log(`Berhasil mengunduh dan menyimpan: ${fileName}`);\n        } catch (error) {\n          console.error(\n            `Kesalahan mengunduh gambar ${\n              i + 1\n            }: ${error}. Percobaan ${attempts} dari ${maxRetries}`\n          );\n          if (attempts < maxRetries) {\n            await delay(2000); // Menunggu 2 detik sebelum mencoba lagi\n          }\n        }\n      }\n\n      if (!success) {\n        failedDownloads.push(images[i]);\n        console.error(\n          `Gagal mengunduh gambar ${i + 1} setelah ${maxRetries} percobaan.`\n        );\n      }\n    }\n\n    if (failedDownloads.length > 0) {\n      console.log(\"Daftar URL yang gagal diunduh:\", failedDownloads);\n      alert(`Gagal mengunduh beberapa gambar. Lihat console untuk detail.`);\n    } else {\n      alert(\"Semua gambar berhasil diunduh dan disimpan.\");\n    }\n  };\n\n  const isValidUrl = (string) => {\n    try {\n      new URL(string);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  return (\n    <div>\n      <h1>Pengunduh Gambar</h1>\n      <button onClick={downloadImages}>Unduh Gambar</button>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}