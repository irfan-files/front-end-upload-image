{"ast":null,"code":"var _jsxFileName = \"/Users/irfan/Documents/Programming/downloaderPict/image-downloader/src/App.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { saveAs } from \"file-saver\";\nimport imageData from \"./excel-to-json.json\"; // Ensure this JSON file is placed in the src directory\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  const downloadImages = async () => {\n    const images = imageData.Products.map(product => product.item_image);\n    const maxRetries = 3;\n    for (let i = 0; i < images.length; i++) {\n      let attempts = 0;\n      let success = false;\n      while (attempts < maxRetries && !success) {\n        try {\n          attempts++;\n          const response = await axios.get(images[i], {\n            responseType: \"blob\"\n          });\n          const fileName = `${i + 1}.jpg`; // Renaming files starting from 1\n          saveAs(response.data, fileName);\n          success = true;\n          console.log(`Successfully downloaded: ${fileName}`);\n        } catch (error) {\n          console.error(`Error downloading image ${i + 1}: ${error}. Attempt ${attempts} of ${maxRetries}`);\n        }\n      }\n      if (!success) {\n        console.error(`Failed to download image ${i + 1} after ${maxRetries} attempts.`);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Image Downloader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: downloadImages,\n      children: \"Download Images\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","axios","saveAs","imageData","jsxDEV","_jsxDEV","App","downloadImages","images","Products","map","product","item_image","maxRetries","i","length","attempts","success","response","get","responseType","fileName","data","console","log","error","children","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/irfan/Documents/Programming/downloaderPict/image-downloader/src/App.js"],"sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { saveAs } from \"file-saver\";\nimport imageData from \"./excel-to-json.json\"; // Ensure this JSON file is placed in the src directory\n\nconst App = () => {\n  const downloadImages = async () => {\n    const images = imageData.Products.map((product) => product.item_image);\n    const maxRetries = 3;\n\n    for (let i = 0; i < images.length; i++) {\n      let attempts = 0;\n      let success = false;\n\n      while (attempts < maxRetries && !success) {\n        try {\n          attempts++;\n          const response = await axios.get(images[i], { responseType: \"blob\" });\n          const fileName = `${i + 1}.jpg`; // Renaming files starting from 1\n          saveAs(response.data, fileName);\n          success = true;\n          console.log(`Successfully downloaded: ${fileName}`);\n        } catch (error) {\n          console.error(\n            `Error downloading image ${\n              i + 1\n            }: ${error}. Attempt ${attempts} of ${maxRetries}`\n          );\n        }\n      }\n\n      if (!success) {\n        console.error(\n          `Failed to download image ${i + 1} after ${maxRetries} attempts.`\n        );\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h1>Image Downloader</h1>\n      <button onClick={downloadImages}>Download Images</button>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,YAAY;AACnC,OAAOC,SAAS,MAAM,sBAAsB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,MAAMC,MAAM,GAAGL,SAAS,CAACM,QAAQ,CAACC,GAAG,CAAEC,OAAO,IAAKA,OAAO,CAACC,UAAU,CAAC;IACtE,MAAMC,UAAU,GAAG,CAAC;IAEpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,MAAM,CAACO,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,IAAIE,QAAQ,GAAG,CAAC;MAChB,IAAIC,OAAO,GAAG,KAAK;MAEnB,OAAOD,QAAQ,GAAGH,UAAU,IAAI,CAACI,OAAO,EAAE;QACxC,IAAI;UACFD,QAAQ,EAAE;UACV,MAAME,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAACX,MAAM,CAACM,CAAC,CAAC,EAAE;YAAEM,YAAY,EAAE;UAAO,CAAC,CAAC;UACrE,MAAMC,QAAQ,GAAG,GAAGP,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;UACjCZ,MAAM,CAACgB,QAAQ,CAACI,IAAI,EAAED,QAAQ,CAAC;UAC/BJ,OAAO,GAAG,IAAI;UACdM,OAAO,CAACC,GAAG,CAAC,4BAA4BH,QAAQ,EAAE,CAAC;QACrD,CAAC,CAAC,OAAOI,KAAK,EAAE;UACdF,OAAO,CAACE,KAAK,CACX,2BACEX,CAAC,GAAG,CAAC,KACFW,KAAK,aAAaT,QAAQ,OAAOH,UAAU,EAClD,CAAC;QACH;MACF;MAEA,IAAI,CAACI,OAAO,EAAE;QACZM,OAAO,CAACE,KAAK,CACX,4BAA4BX,CAAC,GAAG,CAAC,UAAUD,UAAU,YACvD,CAAC;MACH;IACF;EACF,CAAC;EAED,oBACER,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,EAAI;IAAgB;MAAAL,QAAA,EAAAM,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBxB,OAAA;MAAQyB,OAAO,EAAEvB,cAAe;MAAAmB,QAAA,EAAC;IAAe;MAAAL,QAAA,EAAAM,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAR,QAAA,EAAAM,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAEV,CAAC;AAACE,EAAA,GAxCIzB,GAAG;AA0CT,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}